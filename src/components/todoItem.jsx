import React, { useEffect, useState } from 'react'

const TodoItem = (props) => {
    const {emitDeleteTodoItem} = props;
    const [todoItem, setTodoItem] = useState(props.data);
    const [isDirty, setDirty] = useState(false);
    const [isEditing, setIsEditing] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


    useEffect(()=>{
      if (isDirty) {
        fetch(`http://localhost:8080/update-todo-by-id/${todoItem.id}`,{
          method: 'PUT',
          headers: {
            'content-type': 'application/json',
          },
          body: JSON.stringify(todoItem),
        }).then (response => response.json()).then(data => {
          setDirty(false);
          setTodoItem(data);
        });
      }
    },[todoItem, isDirty])

    function updateIsDone () {
      setTodoItem({...todoItem, isDone: !todoItem.isDone})
      
    }

    function updateTask (e) {
      setDirty(true);
      setTodoItem ({...todoItem, text: e.target.value});
    }

    function deleteTodoItem () {
      fetch(`http://localhost:8080/delete-todo-by-id/${todoItem.id}`,{
          method: 'DELETE',
          headers: {
            'content-type': 'application/json',
          },
        }).then (response => emitDeleteTodoItem(todoItem));
    }

    const saveTodoItem = () => {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –æ–±–Ω–æ–≤–∏–≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', todoItem);
      // –ù–∞–ø—Ä–∏–º–µ—Ä:
      fetch(`http://localhost:8080/update-todo-by-id/${todoItem.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(todoItem),
      })
      .then(response => response.json())
      .then(data => {
        console.log('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', data);
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
      });
  
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ dirty
      setDirty(false);
    };

    const handleKeyPress = (e) => {
      if (e.key === 'Enter') {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ Enter –≤ —Ñ–æ—Ä–º–µ
        setDirty(true);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä:
        setIsEditing(false);
        saveTodoItem();
        e.target.blur();
        // –∏–ª–∏
        // updateTaskTitle(todoItem.text);
      }
    };

  return (
    <div className='newTodoForm'>
      <input type="checkbox"
             className='checkbox'
             value={todoItem} 
             checked= {todoItem.isDone} 
             onChange= {() => {
        setDirty(true);
        setTodoItem({...todoItem, isDone: !todoItem.isDone});}}
      />
      {
        todoItem.isDone ? 
          // (<span /*style = {{textDecoration: "line-through"}}*/>{todoItem.text}</span>) 
          (<input className='inputField' value={todoItem.text} />):
          (<input 
              type="text"
              className='inputField'
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" 
              value={todoItem.text} 
              onChange={updateTask}
              onKeyDown={handleKeyPress}/>)
      }
      <span className='trashbin'
        style={{marginLeft: "2rem", cursor: 'pointer'}} 
        onClick={deleteTodoItem}>üóëÔ∏è</span>
    </div>  
  );
};

export default TodoItem;